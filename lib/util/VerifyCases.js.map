{"version":3,"sources":["../../src/util/VerifyCases.js"],"names":["types","VerifyCases","caseArray","cases","type","forEach","includes","c","Error","length","Array","isArray"],"mappings":";;;;;;;;;AAAA,IAAMA,QAAQ,CACb,QADa,EAEb,QAFa,EAGb,SAHa,CAAd;;AAMA,IAAMC,cAAc,SAAdA,WAAc,CAACC,SAAD,EAAe;AAElC,MAAIC,KAAJ,EAAWC,IAAX;;AACA,kBAAeF,UAAU,CAAV,CAAf;AACC,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACC,UAAIA,UAAUG,OAAV,CAAkB;AAAA,eAAKL,MAAMM,QAAN,SAAsBC,CAAtB,EAAL;AAAA,OAAlB,CAAJ,EAAsD,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACtDL,cAAQD,SAAR;AACAE,aAAO,OAAP;AACA;;AAED,SAAK,QAAL;AACC,UAAIF,UAAUO,MAAV,GAAmB,CAAvB,EAA0B,MAAM,IAAID,KAAJ,CAAU,sEAAV,CAAN;;AAC1B,UAAIE,MAAMC,OAAN,CAAcT,UAAU,CAAV,CAAd,CAAJ,EAAiC;AAChCC,gBAAQF,YAAYC,UAAU,CAAV,CAAZ,EAA0BC,KAAlC;AACAC,eAAOH,YAAYC,UAAU,CAAV,CAAZ,EAA0BE,IAAjC;AACA,OAHD,MAGO;AACND,gBAAQD,UAAU,CAAV,CAAR;AACAE,eAAO,QAAP;AACA;;AACD;;AAED;AACC,YAAM,IAAII,KAAJ,CAAU,oEAAV,CAAN;AArBF;;AAwBA,SAAO;AACNL,gBADM;AAENC;AAFM,GAAP;AAKA,CAhCD;;eAkCeH,W","sourcesContent":["const types = [\n\t'string',\n\t'number',\n\t'boolean'\n]\n\nconst VerifyCases = (caseArray) => {\n\n\tlet cases, type\n\tswitch (typeof caseArray[0]) {\n\t\tcase 'string':\n\t\tcase 'number':\n\t\tcase 'boolean':\n\t\t\tif (caseArray.forEach(c => types.includes(typeof c))) throw new Error('Enumer8 currently only supports string, number, and boolean values')\n\t\t\tcases = caseArray\n\t\t\ttype = 'array'\n\t\t\tbreak\n\n\t\tcase 'object':\n\t\t\tif (caseArray.length > 1) throw new Error('Individual values cannot be enumerated if an object/array is present')\n\t\t\tif (Array.isArray(caseArray[0])) {\n\t\t\t\tcases = VerifyCases(caseArray[0]).cases\n\t\t\t\ttype = VerifyCases(caseArray[0]).type\n\t\t\t} else {\n\t\t\t\tcases = caseArray[0]\n\t\t\t\ttype = 'object'\n\t\t\t}\n\t\t\tbreak\n\n\t\tdefault:\n\t\t\tthrow new Error('Enumer8 currently only supports string, number, and boolean values')\n\t}\n\n\treturn {\n\t\tcases,\n\t\ttype\n\t}\n\n}\n\nexport default VerifyCases\n"],"file":"VerifyCases.js"}