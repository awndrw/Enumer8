{"version":3,"sources":["../src/Enumer8.js"],"names":["CONFIG","Symbol","CASES","FROZEN","IDS","DEFAULTS","type","freeze","ignoreCase","iterator","Enum","config","cases","pushCase","id","val","Error","rawValue","ids","push","newCase","typeResolve","indexOf","Object","assign","console","error","Case","forEach","c","keys","value","find"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAEA,IAAMA,SAASC,OAAO,QAAP,CAAf;AAAA,IACGC,QAAQD,OAAO,OAAP,CADX;AAAA,IAEGE,SAASF,OAAO,QAAP,CAFZ;AAAA,IAGGG,MAAMH,OAAO,KAAP,CAHT;AAMA;;;;;AAIA,IAAMI,WAAW;AAChBC,QAAM,KADU;AAEhBC,UAAQ,KAFQ;AAGhBC,cAAY;AAGb;;;;;AANiB,CAAjB;uBA2FEP,OAAOQ,Q;;IAjFYC,I;;;AACpB;;;;;AAKA,kBAAyB;AAAA;;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAAA,6BA2EL;AAAA,aAAM,MAAKC,KAAL,CAAWX,OAAOQ,QAAlB,GAAN;AAAA,KA3EK;;AAAA,SAoFzBI,QApFyB,GAoFd,UAACC,EAAD,EAAKC,GAAL,EAAa;AACvB,UAAI,QAAOA,GAAP,MAAe,MAAKf,MAAL,EAAaM,IAA5B,IAAoC,OAAOS,GAAP,KAAe,WAAvD,EAAoE,MAAM,IAAIC,KAAJ,4EAA8EC,QAA9E,yCAA8EA,QAA9E,0BAAqG,MAAKjB,MAAL,EAAaM,IAAlH,EAAN;;AACpE,YAAKY,GAAL,CAASC,IAAT,CAAcL,EAAd;;AACA,UAAIM,UAAU;AACbN,YAAIA,EADS;AAEbG,kBAAU,MAAKI,WAAL,CAAiBP,EAAjB,EAAqBC,GAArB,EAA0B,MAAKf,MAAL,EAAaM,IAAvC;AAFG,OAAd;AAIA,YAAKQ,EAAL,IAAWM,OAAX;AACA,YAAKR,KAAL,CAAWE,EAAX,IAAiBM,OAAjB;AACA,KA7FwB;;AAAA,SAqGzBC,WArGyB,GAqGX,UAACP,EAAD,EAAKG,QAAL,EAAeX,IAAf,EAAwB;AACrC,sBAAeW,QAAf;AACC,aAAK,WAAL;AACC,kBAAQX,IAAR;AACC,iBAAK,KAAL;AAAY,qBAAOQ,EAAP;;AACZ,iBAAK,QAAL;AAAe,qBAAOA,EAAP;;AACf,iBAAK,QAAL;AAAe,qBAAO,MAAKI,GAAL,CAASI,OAAT,CAAiBR,EAAjB,IAAuB,CAA9B;;AACf,iBAAK,SAAL;AAAgB,qBAAO,IAAP;;AAChB;AAAS,oBAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AALV;;AAOD,aAAK,MAAKhB,MAAL,EAAaM,IAAlB;AAAwB,iBAAOW,QAAP;;AACxB;AAAS,gBAAM,IAAID,KAAJ,6EAA8EC,QAA9E,0BAAqG,MAAKjB,MAAL,EAAaM,IAAlH,EAAN;AAVV;AAYA,KAlHwB;;AACxB,oBAAeK,MAAf;AACC,WAAK,QAAL;AACC,aAAKX,MAAL,IAAeuB,OAAOC,MAAP,CAAcnB,QAAd,EAAwBM,MAAxB,CAAf;AACA;;AAED,WAAK,QAAL;AACC,aAAKX,MAAL,IAAeuB,OAAOC,MAAP,CAAcnB,QAAd,EAAwB;AAACC,gBAAMK;AAAP,SAAxB,CAAf;AACA;;AAED;AAAS,cAAM,IAAIK,KAAJ,CAAU,gCAAV,CAAN;AATV;;AAWA,WAAO,IAAP;AACA;AAED;;;;;;;;;4BAKe;AAAA;;AACd,UAAI,KAAKb,MAAL,CAAJ,EAAkB;AACjBsB,gBAAQC,KAAR,CAAc,wDAAd;AACA,eAAO,IAAP;AACA;;AAJa,wCAANC,IAAM;AAANA,YAAM;AAAA;;AAAA,yBAMM,2BAAYA,IAAZ,CANN;AAAA,UAMTf,KANS,gBAMTA,KANS;AAAA,UAMFN,IANE,gBAMFA,IANE;;AAQd,UAAI,QAAOM,KAAP,MAAiB,QAArB,EAA+B,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;;AAE/B,cAAQV,IAAR;AACC,aAAK,OAAL;AACCM,gBAAMgB,OAAN,CAAc;AAAA,mBAAK,OAAKf,QAAL,CAAcgB,CAAd,CAAL;AAAA,WAAd;AACA;;AAED,aAAK,QAAL;AACC,cAAI,CAAC,KAAK7B,MAAL,EAAaM,IAAlB,EAAwB,MAAM,IAAIU,KAAJ,CAAU,kEAAV,CAAN;AACxBO,iBAAOO,IAAP,CAAYlB,KAAZ,EAAmBgB,OAAnB,CAA2B;AAAA,mBAAK,OAAKf,QAAL,CAAcgB,CAAd,EAAiBjB,MAAMiB,CAAN,CAAjB,CAAL;AAAA,WAA3B;AACA;;AAED;AACC,gBAAM,IAAIb,KAAJ,CAAU,eAAV,CAAN;AAXF;;AAcA,UAAI,KAAKhB,MAAL,EAAaO,MAAjB,EAAyB,KAAKJ,MAAL,IAAe,IAAf;AAEzB,aAAO,IAAP;AACA;AAED;;;;;;;;4BAKQ4B,K,EAAO;AAAE,aAAO,KAAKnB,KAAL,CAAWoB,IAAX,CAAgB;AAAA,eAAKH,EAAEZ,QAAF,KAAec,KAApB;AAAA,OAAhB,CAAP;AAAmD;AAEpE;;;;6BACS;AAAE,WAAK5B,MAAL,IAAe,IAAf;AAAqB;AAEhC;;;;;;;+BAIW;AAAE,aAAO,KAAKA,MAAL,CAAP;AAAqB;AAElC;;;;;;;wBAIY;AACX,WAAKD,KAAL,IAAc,KAAKA,KAAL,KAAe,EAA7B;AACA,aAAO,KAAKA,KAAL,CAAP;AACA;AAED;;;;;AA0CA;;;wBAGU;AACT,WAAKE,GAAL,IAAY,KAAKA,GAAL,KAAa,EAAzB;AACA,aAAO,KAAKA,GAAL,CAAP;AACA","sourcesContent":["import VerifyCases from './util/VerifyCases'\n\nconst CONFIG = Symbol('CONFIG'),\n\t\t\tCASES = Symbol('CASES'),\n\t\t\tFROZEN = Symbol('FROZEN'),\n\t\t\tIDS = Symbol('IDS')\n\n\n/**\n * @const {Config} Default Enum Configuration\n * @private\n */\nconst DEFAULTS = {\n\ttype: false,\n\tfreeze: false,\n\tignoreCase: false\n}\n\n/**\n * Enumeration Class\n * @class Enum\n */\nexport default class Enum {\n\t/**\n\t * Creates an instance of Enum.\n\t * @param {Config|RawTypes} [config={}]\n\t * @memberof Enum\n\t */\n\tconstructor(config = {}) {\n\t\tswitch (typeof config) {\n\t\t\tcase 'object':\n\t\t\t\tthis[CONFIG] = Object.assign(DEFAULTS, config)\n\t\t\t\tbreak\n\n\t\t\tcase 'string':\n\t\t\t\tthis[CONFIG] = Object.assign(DEFAULTS, {type: config})\n\t\t\t\tbreak\n\n\t\t\tdefault: throw new Error('Unknown configuration recieved')\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Enumerates the case(s) passed into the function\n\t * @param {...caseTypes} Case A string, array of strings, or object to enumerate\n\t * @return {Enum}\n\t */\n\tcase (...Case) {\n\t\tif (this[FROZEN]) {\n\t\t\tconsole.error('Cases cannot be added after the enumeration is frozen.')\n\t\t\treturn this\n\t\t}\n\n\t\tlet {cases, type} = VerifyCases(Case)\n\n\t\tif (typeof cases !== 'object') throw new Error('UNKNOWN TYPE?')\n\n\t\tswitch (type) {\n\t\t\tcase 'array':\n\t\t\t\tcases.forEach(c => this.pushCase(c))\n\t\t\t\tbreak\n\n\t\t\tcase 'object':\n\t\t\t\tif (!this[CONFIG].type) throw new Error('Type must be configured to use enumeration cases with raw values')\n\t\t\t\tObject.keys(cases).forEach(c => this.pushCase(c, cases[c]))\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('UNKNOWN TYPE?')\n\t\t}\n\n\t\tif (this[CONFIG].freeze) this[FROZEN] = true\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Returns the enumerated property with a specified value\n\t * @param {*} value The value to find in the enumeration\n\t * @returns {EnumCase}\n\t */\n\tfindVal(value) { return this.cases.find(c => c.rawValue === value) }\n\n\t/** Freezes the enumeration */\n\tfreeze() { this[FROZEN] = true }\n\n\t/**\n\t * Returns whether or not the enumeration is frozen\n\t * @returns {boolean}\n\t */\n\tisFrozen() { return this[FROZEN] }\n\n\t/**\n\t * Get all enumerated values\n\t * @return {Array}\n\t */\n\tget cases() {\n\t\tthis[CASES] = this[CASES] || {}\n\t\treturn this[CASES]\n\t}\n\n\t/** Allows for the iteration of cases */\n\t[Symbol.iterator] = () => this.cases[Symbol.iterator]()\n\n\n\t/**\n\t * Pushes enumeration to store\n\t * @param {string} id ID for the enumeration pair\n\t * @param {*} [rawValue] Optional raw value\n\t * @private\n\t */\n\tpushCase = (id, val) => {\n\t\tif (typeof val !== this[CONFIG].type && typeof val !== 'undefined') throw new Error(`Raw value must conform to the specified type.\\nRaw value: ${typeof rawValue}, Expected: ${this[CONFIG].type}`)\n\t\tthis.ids.push(id)\n\t\tlet newCase = {\n\t\t\tid: id,\n\t\t\trawValue: this.typeResolve(id, val, this[CONFIG].type)\n\t\t}\n\t\tthis[id] = newCase\n\t\tthis.cases[id] = newCase\n\t}\n\n\t/**\n\t * Returns a custom rawValue if none is provided\n\t * @param {string} type The type of raw value to return\n\t * @param {string} id\n\t * @private\n\t */\n\ttypeResolve = (id, rawValue, type) => {\n\t\tswitch (typeof rawValue) {\n\t\t\tcase 'undefined':\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase false: return id\n\t\t\t\t\tcase 'string': return id\n\t\t\t\t\tcase 'number': return this.ids.indexOf(id) + 1\n\t\t\t\t\tcase 'boolean': return true\n\t\t\t\t\tdefault: throw new Error('The provided type was not found!')\n\t\t\t\t}\n\t\t\tcase this[CONFIG].type: return rawValue\n\t\t\tdefault: throw new Error(`Raw value must conform to the specified type.\\nRaw value: ${typeof rawValue}, Expected: ${this[CONFIG].type}`)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tget ids() {\n\t\tthis[IDS] = this[IDS] || []\n\t\treturn this[IDS]\n\t}\n\n}\n"],"file":"Enumer8.js"}