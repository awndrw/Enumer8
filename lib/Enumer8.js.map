{"version":3,"sources":["../src/Enumer8.js"],"names":["CONFIG","Symbol","CASES","FROZEN","IDS","DEFAULTS","type","freeze","iterator","Enum","config","cases","pushCase","id","val","ids","push","newCase","console","log","rawValue","typeResolve","TypeError","indexOf","Error","validateCases","caseArray","forEach","c","includes","length","Array","isArray","verified","Object","assign","error","Case","keys","value","find"],"mappings":"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","sourcesContent":["const CONFIG = Symbol('CONFIG'),\n\tCASES = Symbol('CASES'),\n\tFROZEN = Symbol('FROZEN'),\n\tIDS = Symbol('IDS')\n\n\n/**\n * @const {Config} Default Enum Configuration\n * @private\n */\nconst DEFAULTS = {\n\ttype: false,\n\tfreeze: false\n}\n\n/**\n * Enumeration Class\n * @class Enum\n */\nexport default class Enum {\n\t/**\n\t * Creates an instance of Enum.\n\t * @param {Config|RawTypes} [config={}]\n\t * @memberof Enum\n\t */\n\tconstructor(config = {}) {\n\t\tswitch (typeof config) {\n\t\t\tcase 'object':\n\t\t\t\tthis[CONFIG] = Object.assign(DEFAULTS, config)\n\t\t\t\tbreak\n\n\t\t\tcase 'string':\n\t\t\t\tthis[CONFIG] = Object.assign(DEFAULTS, {type: config})\n\t\t\t\tbreak\n\n\t\t\tdefault: throw new Error('Unknown configuration object recieved')\n\t\t}\n\t\t\n\t\treturn this\n\t}\n\n\t/**\n\t * Enumerates the case(s) passed into the function\n\t * @param {...caseTypes} Case A string, array of strings, or object to enumerate\n\t * @return {Enum}\n\t */\n\tcase (...Case) {\n\t\tif (this[FROZEN]) {\n\t\t\tconsole.error('Cases cannot be added after the enumeration is frozen.')\n\t\t\treturn this\n\t\t}\n\n\t\tlet {cases, type} = this.validateCases(Case)\n\n\t\tswitch (type) {\n\t\t\tcase 'array':\n\t\t\t\tcases.forEach(c => this.pushCase(c))\n\t\t\t\tbreak\n\n\t\t\tcase 'object':\n\t\t\t\tif (!this[CONFIG].type) throw new Error('Type must be defined in initialization to use enumeration cases with raw values.')\n\t\t\t\tObject.keys(cases).forEach(c => this.pushCase(c, cases[c]))\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tthrow new TypeError('Unknown case array returned from verification.')\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Returns the enumerated property with a specified value\n\t * @param {*} value The value to find in the enumeration\n\t * @returns {EnumCase}\n\t */\n\tfindVal(value) { return this.cases.find(c => c.rawValue === value) }\n\n\t/** Freezes the enumeration */\n\tfreeze() { this[FROZEN] = true }\n\n\t/**\n\t * Returns whether or not the enumeration is frozen\n\t * @returns {boolean}\n\t */\n\tisFrozen() { return this[FROZEN] }\n\n\t/**\n\t * Get all enumerated values\n\t * @return {Array}\n\t */\n\tget cases() {\n\t\tthis[CASES] = this[CASES] || {}\n\t\treturn this[CASES]\n\t}\n\n\t/** Allows for the iteration of cases */\n\t[Symbol.iterator] = () => this.cases[Symbol.iterator]()\n\n\n\t/**\n\t * Pushes enumeration to store\n\t * @param {string} id ID for the enumeration pair\n\t * @param {*} [rawValue] Optional raw value\n\t * @private\n\t */\n\tpushCase = (id, val) => {\n\t\tthis.ids.push(id)\n\t\tlet newCase = { id: id }\n\t\tconsole.log(`id: ${id}, val: ${val}, type: ${this[CONFIG].type}`)\n\t\tif (typeof val === 'undefined') newCase.rawValue = this.typeResolve(id, val, this[CONFIG].type)\n\t\telse if (typeof val !== this[CONFIG].type) throw new TypeError(`Raw value must conform to the specified type.\\nRaw value: ${typeof val}, Expected: ${this[CONFIG].type}`)\n\t\telse newCase.rawValue = val\n\n\t\tthis[id] = newCase\n\t\tthis.cases[id] = newCase\n\t}\n\n\t/**\n\t * Returns a custom rawValue if none is provided\n\t * @param {string} type The type of raw value to return\n\t * @param {string} id\n\t * @private\n\t */\n\ttypeResolve = (id, rawValue, type) => {\n\t\tswitch (typeof rawValue) {\n\t\t\tcase 'undefined':\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase false: return id\n\t\t\t\t\tcase 'string': return id\n\t\t\t\t\tcase 'number': return this.ids.indexOf(id) + 1\n\t\t\t\t\tcase 'boolean': return true\n\t\t\t\t\tdefault: throw new Error('The provided type was not found!')\n\t\t\t\t}\n\t\t\tcase this[CONFIG].type: return rawValue\n\t\t\tdefault: throw new Error(`Raw value must conform to the specified type.\\nRaw value: ${typeof rawValue}, Expected: ${this[CONFIG].type}`)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tget ids() {\n\t\tthis[IDS] = this[IDS] || []\n\t\treturn this[IDS]\n\t}\n\n\t/**\n\t * @private\n\t */\n\tvalidateCases = (caseArray) => {\n\n\tlet cases, type\n\tswitch (typeof caseArray[0]) {\n\t\tcase 'string':\n\t\tcase 'number':\n\t\tcase 'boolean':\n\t\t\tif (caseArray.forEach(c => ['string','number','boolean'].includes(typeof c))) throw new Error('Enumer8 currently only supports string, number, and boolean values')\n\t\t\tcases = caseArray\n\t\t\ttype = 'array'\n\t\t\tbreak\n\n\t\tcase 'object':\n\t\t\tif (caseArray.length > 1) throw new Error('Individual values cannot be enumerated if an object/array is present')\n\t\t\tif (Array.isArray(caseArray[0])) {\n\t\t\t\tlet verified = this.validateCases(caseArray[0])\n\t\t\t\tcases = verified.cases\n\t\t\t\ttype = verified.type\n\t\t\t} else {\n\t\t\t\tcases = caseArray[0]\n\t\t\t\ttype = 'object'\n\t\t\t}\n\t\t\tbreak\n\n\t\tdefault:\n\t\t\tthrow new TypeError('Enumer8 currently only supports string, number, and boolean values')\n\t}\n\n\treturn {\n\t\tcases,\n\t\ttype\n\t}\n\n}\n\n}\n"],"file":"Enumer8.js"}