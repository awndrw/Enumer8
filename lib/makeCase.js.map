{"version":3,"sources":["../src/makeCase.js"],"names":["makeCase","id","val","type","index","rawValue","typeResolve","TypeError","rv","Error"],"mappings":";;;;;;;;;AAAe,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AACtD,MAAIC,QAAJ;AACA,MAAI,OAAOH,GAAP,KAAe,WAAnB,EAAgCG,QAAQ,GAAGC,WAAW,CAACH,IAAD,EAAOF,EAAP,EAAWG,KAAX,CAAtB,CAAhC,KACK,IAAI,QAAOF,GAAP,MAAeC,IAAnB,EAAyB,MAAM,IAAII,SAAJ,4EAAkFC,EAAlF,yCAAkFA,EAAlF,0BAAmGL,IAAnG,EAAN,CAAzB,KACAE,QAAQ,GAAGH,GAAX;AAEL,SAAO;AAAED,IAAAA,EAAE,EAAFA,EAAF;AAAMI,IAAAA,QAAQ,EAARA;AAAN,GAAP;AACA;;AAED,SAASC,WAAT,CAAqBH,IAArB,EAA2BF,EAA3B,EAA+BG,KAA/B,EAAsC;AACrC,UAAQD,IAAR;AACC,SAAK,QAAL;AAAe,aAAOF,EAAP;;AACf,SAAK,QAAL;AAAe,aAAOG,KAAP;;AACf,SAAK,SAAL;AAAgB,aAAO,IAAP;;AAChB;AAAS,YAAM,IAAIK,KAAJ,CAAU,kCAAV,CAAN;AAJV;AAMA","sourcesContent":["export default function makeCase(id, val, type, index) {\n\tlet rawValue\n\tif (typeof val === 'undefined') rawValue = typeResolve(type, id, index)\n\telse if (typeof val !== type) throw new TypeError(`Raw value must conform to the specified type.\\nRaw value: ${typeof rv}, Expected: ${type}`)\n\telse rawValue = val\n\n\treturn { id, rawValue }\n}\n\nfunction typeResolve(type, id, index) {\n\tswitch (type) {\n\t\tcase 'string': return id\n\t\tcase 'number': return index\n\t\tcase 'boolean': return true\n\t\tdefault: throw new Error('The provided type was not found!')\n\t}\n}"],"file":"makeCase.js"}